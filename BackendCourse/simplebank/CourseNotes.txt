// start the docker container
docker start postgres17

// launch a shell inside the docker container
docker exec -it postgres17 bash

// create a database
createdb --username=root --owner=root simple_bank

// access the database
psql simple_bank

// remove the database
dropdb simple_bank

// access the database inside the container using a makefile 
see Makefile

// create the database migrations
migrate create -ext sql -dir db/migration -seq init_schema
Copy the instructions into the 'up' file
Add instructions to drop the table in the 'down' file
Add relevant targets to Makefile

// CRUD
- Basic option is to use directly in the code with db.QueryRowContext
  It's tedious and buggy, all mappings need to be done manually
  But it's fast
- A safer way is to use GORM (www.gorm.io)
  Slow on high load
- SQLX
  A middleway library, runs fast and easy to use but errors will occur only on runtime
- SQLC (sqlc.dev)
  Automatically generates Go code from SQL queries
  Supposrts on Postgres

// Using SQLC library
- Create a yaml file
- Add a query in the query folder (account.sql) for crerating an account (CreateAccount). 
  Examples in: https://docs.sqlc.dev/en/latest/tutorials/getting-started-postgresql.html
  Make sure to add the "RETURNING *" to the query
- Run "sqlc generate": 3 files are generated:
    - models.go - Code with the database schema in go structs
    - accounts.sql.go - Code with the operations from query/account.sql
    - db.go - Code with DBTX interface 

- Run: 
    go mod init github.com/techschool/simplebank, to create go.mod
    go mod tidy - to install 
    
- Add .sql files for entries and transfers and run "make sqlc" to generate go code for them

// Create tests for all sqlc files
- create a test_<*.sqlc.go> files and add Test<func> for every function

// Wrap updates inside a trtansaction
- Create a transaction in store.go and a test in store_test.go

// Create CI in github with a github workflow using a yaml file

// Create a web server with RESTfull API using gin

// Add config file with Viper

// 15: Add a Mock DB with mockgen
- Change the Store to an interface
- Change emit_interface setting in sqol.yaml to true and run "make sqlc" to generate "Querier.go" with the interface
- Create "db/mock" folder
- Run the mockgen package to create a mock for the Store object:
  mockgen -destination db/mock/store.go -package mockdb github.com/ofer-sin/Courses/BackendCourse/simplebank/db/sqlc Store
  --> a new file db/mock/store.go is created with implementations for the mock db store
  --> Create account_test.go inside api folder and test with the mock store

// 16: IMplement the transfer money API

// 17: Add Users table
- Add users table in dbdiagram.io and export to Postgresql
- Create a new migration: "migrate create -ext sql -dir db/migration -seq add_users"
- Add the new code from the exported code to the newly created 'up' migration file
- Running "make migrateup" will fail because the existing account owners do not reffer to any existing username
  because there are no users yet.
- Run "make migratedown" to delete the existing data AFTER manualy updating the dirty flag to false
- Re-run "make migrateup" to regenerate the tables and the indexes
- Add the opposite migration commands to the down migration file
- Add a new make target: migratedown1 to migrate down only the last migration

// 18: Add Golang code for the users table
- Create users.sql with CreateUser and GetUser queries and run "make sqlc" -->
- Table usesrs is added to models.go and a new file users.sql.go is created.
- Write a test in user_test.go
- Run "make mock" to update the store.go mock with the new API
- Update accounts_test.go to use en existing user instead of a random user.
- Update other files accordingly
- Run "make test" to run the all the tests and make sure all tests pass










