// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0

package db

import (
	"context"
)

type Querier interface {
	AddAccountBalance(ctx context.Context, arg AddAccountBalanceParams) (Accounts, error)
	CreateAccount(ctx context.Context, arg CreateAccountParams) (Accounts, error)
	CreateEntry(ctx context.Context, arg CreateEntryParams) (Entries, error)
	CreateTransfer(ctx context.Context, arg CreateTransferParams) (Transfers, error)
	DeleteAccount(ctx context.Context, id int64) error
	GetAccount(ctx context.Context, id int64) (Accounts, error)
	GetAccountForUpdate(ctx context.Context, id int64) (Accounts, error)
	GetEntry(ctx context.Context, id int64) (Entries, error)
	GetTransfer(ctx context.Context, id int64) (Transfers, error)
	// Tell SQL that Key is not updated in this transaction
	ListAccounts(ctx context.Context, arg ListAccountsParams) ([]Accounts, error)
	// This query retrieves a list of entries from the "entries" table that belong to a specific account (filtered by account_id).
	// The results are ordered by the "id" column in ascending order.
	// The "LIMIT $2" clause restricts the number of rows returned to the value specified by the second parameter.
	// The "OFFSET $3" clause skips the first $3 rows, allowing for pagination of results.
	// Key Points:
	// account_id = $1: Filters rows based on the provided account ID.
	// ORDER BY id: Ensures the results are sorted by the id column in ascending order.
	// LIMIT $2: Limits the number of rows returned to the value of $2.
	// OFFSET $3: Skips the first $3 rows, useful for implementing pagination.
	// This query is commonly used in applications to fetch a subset of data for a specific account, often for displaying paginated results in a UI.
	ListEntries(ctx context.Context, arg ListEntriesParams) ([]Entries, error)
	ListTransfers(ctx context.Context, arg ListTransfersParams) ([]Transfers, error)
	UpdateAccount(ctx context.Context, arg UpdateAccountParams) (Accounts, error)
}

var _ Querier = (*Queries)(nil)
